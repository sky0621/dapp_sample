/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenBankInterface extends utils.Interface {
  functions: {
    "owner()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "owner"): FunctionFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;

  events: {
    "TokenDeposit(address,uint256)": EventFragment;
    "TokenTransfer(address,address,uint256)": EventFragment;
    "TokenWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
}

export interface TokenDepositEventObject {
  from: string;
  amount: BigNumber;
}
export type TokenDepositEvent = TypedEvent<
  [string, BigNumber],
  TokenDepositEventObject
>;

export type TokenDepositEventFilter = TypedEventFilter<TokenDepositEvent>;

export interface TokenTransferEventObject {
  from: string;
  to: string;
  amount: BigNumber;
}
export type TokenTransferEvent = TypedEvent<
  [string, string, BigNumber],
  TokenTransferEventObject
>;

export type TokenTransferEventFilter = TypedEventFilter<TokenTransferEvent>;

export interface TokenWithdrawEventObject {
  from: string;
  amount: BigNumber;
}
export type TokenWithdrawEvent = TypedEvent<
  [string, BigNumber],
  TokenWithdrawEventObject
>;

export type TokenWithdrawEventFilter = TypedEventFilter<TokenWithdrawEvent>;

export interface TokenBank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenBankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owner(overrides?: CallOverrides): Promise<[string]>;
  };

  owner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    owner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "TokenDeposit(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenDepositEventFilter;
    TokenDeposit(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenDepositEventFilter;

    "TokenTransfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenTransferEventFilter;
    TokenTransfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenTransferEventFilter;

    "TokenWithdraw(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenWithdrawEventFilter;
    TokenWithdraw(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenWithdrawEventFilter;
  };

  estimateGas: {
    owner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
